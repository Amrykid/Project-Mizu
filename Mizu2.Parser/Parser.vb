' Generated by TinyPG v1.3 available at www.codeproject.com

Imports System
Imports System.Collections.Generic


Namespace Mizu.Parser
#Region "Parser"

    Partial Public Class Parser 
        Private m_scanner As Scanner
        Private m_tree As ParseTree

        Public Sub New(ByVal scanner As Scanner)
            m_scanner = scanner
        End Sub


    Public Function Parse(ByVal input As String) As ParseTree
            m_tree = New ParseTree()
            Return Parse(input, m_tree)
        End Function

        Public Function Parse(ByVal input As String, ByVal tree As ParseTree) As ParseTree
            m_scanner.Init(input)

            m_tree = tree
            ParseStart(m_tree)
            m_tree.Skipped = m_scanner.Skipped

            Return m_tree
        End Function

        Private Sub ParseStart(ByVal parent As ParseNode)
            Dim tok As Token
            Dim n As ParseNode
            Dim node As ParseNode = parent.CreateNode(m_scanner.GetToken(TokenType.Start), "Start")
            parent.Nodes.Add(node)

            Do
                ParseStatement(node)
                tok = m_scanner.LookAhead(TokenType.VAR, TokenType.IFKW)
            Loop While tok.Type = TokenType.VAR Or tok.Type = TokenType.IFKW

            parent.Token.UpdateRange(node.Token)
        End Sub

        Private Sub ParseIndention(ByVal parent As ParseNode)
            Dim tok As Token
            Dim n As ParseNode
            Dim node As ParseNode = parent.CreateNode(m_scanner.GetToken(TokenType.Indention), "Indention")
            parent.Nodes.Add(node)

            tok = m_scanner.LookAhead(TokenType.TAB, TokenType.FOURSPACE)
            Select Case tok.Type
            
                Case TokenType.TAB
                    tok = m_scanner.Scan(TokenType.TAB)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.TAB Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.TAB.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case TokenType.FOURSPACE
                    tok = m_scanner.Scan(TokenType.FOURSPACE)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.FOURSPACE Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.FOURSPACE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case Else
                    m_tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", &H0002, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                    Exit Select
            End Select

            parent.Token.UpdateRange(node.Token)
        End Sub

        Private Sub ParseBoolean(ByVal parent As ParseNode)
            Dim tok As Token
            Dim n As ParseNode
            Dim node As ParseNode = parent.CreateNode(m_scanner.GetToken(TokenType.Boolean), "Boolean")
            parent.Nodes.Add(node)

            tok = m_scanner.LookAhead(TokenType.TRUE, TokenType.FALSE)
            Select Case tok.Type
            
                Case TokenType.TRUE
                    tok = m_scanner.Scan(TokenType.TRUE)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.TRUE Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.TRUE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case TokenType.FALSE
                    tok = m_scanner.Scan(TokenType.FALSE)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.FALSE Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.FALSE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case Else
                    m_tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", &H0002, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                    Exit Select
            End Select

            parent.Token.UpdateRange(node.Token)
        End Sub

        Private Sub ParseAssignment(ByVal parent As ParseNode)
            Dim tok As Token
            Dim n As ParseNode
            Dim node As ParseNode = parent.CreateNode(m_scanner.GetToken(TokenType.Assignment), "Assignment")
            parent.Nodes.Add(node)


            
            tok = m_scanner.Scan(TokenType.IDENTIFIER)
            n = node.CreateNode(tok, tok.ToString() )
            node.Token.UpdateRange(tok)
            node.Nodes.Add(n)
            If tok.Type <> TokenType.IDENTIFIER Then
                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IDENTIFIER.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                Return

            End If


            
            tok = m_scanner.LookAhead(TokenType.WHITESPACE)
            If tok.Type = TokenType.WHITESPACE Then
                tok = m_scanner.Scan(TokenType.WHITESPACE)
                n = node.CreateNode(tok, tok.ToString() )
                node.Token.UpdateRange(tok)
                node.Nodes.Add(n)
                If tok.Type <> TokenType.WHITESPACE Then
                    m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.WHITESPACE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                    Return

                End If

            End If

            
            tok = m_scanner.LookAhead(TokenType.EQUAL, TokenType.AS)
            Select Case tok.Type
            
                Case TokenType.EQUAL

                    
                    tok = m_scanner.Scan(TokenType.EQUAL)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.EQUAL Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.EQUAL.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If


                    
                    tok = m_scanner.LookAhead(TokenType.WHITESPACE)
                    If tok.Type = TokenType.WHITESPACE Then
                        tok = m_scanner.Scan(TokenType.WHITESPACE)
                        n = node.CreateNode(tok, tok.ToString() )
                        node.Token.UpdateRange(tok)
                        node.Nodes.Add(n)
                        If tok.Type <> TokenType.WHITESPACE Then
                            m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.WHITESPACE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                            Return

                        End If

                    End If

                    
                    tok = m_scanner.LookAhead(TokenType.IDENTIFIER, TokenType.NUMBER, TokenType.FLOAT, TokenType.NULLKW, TokenType.STRING)
                    Select Case tok.Type
                    
                        Case TokenType.IDENTIFIER
                            tok = m_scanner.Scan(TokenType.IDENTIFIER)
                            n = node.CreateNode(tok, tok.ToString() )
                            node.Token.UpdateRange(tok)
                            node.Nodes.Add(n)
                            If tok.Type <> TokenType.IDENTIFIER Then
                                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IDENTIFIER.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                                Return

                            End If

                        Case TokenType.NUMBER
                            tok = m_scanner.Scan(TokenType.NUMBER)
                            n = node.CreateNode(tok, tok.ToString() )
                            node.Token.UpdateRange(tok)
                            node.Nodes.Add(n)
                            If tok.Type <> TokenType.NUMBER Then
                                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NUMBER.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                                Return

                            End If

                        Case TokenType.FLOAT
                            tok = m_scanner.Scan(TokenType.FLOAT)
                            n = node.CreateNode(tok, tok.ToString() )
                            node.Token.UpdateRange(tok)
                            node.Nodes.Add(n)
                            If tok.Type <> TokenType.FLOAT Then
                                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.FLOAT.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                                Return

                            End If

                        Case TokenType.NULLKW
                            tok = m_scanner.Scan(TokenType.NULLKW)
                            n = node.CreateNode(tok, tok.ToString() )
                            node.Token.UpdateRange(tok)
                            node.Nodes.Add(n)
                            If tok.Type <> TokenType.NULLKW Then
                                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NULLKW.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                                Return

                            End If

                        Case TokenType.STRING
                            tok = m_scanner.Scan(TokenType.STRING)
                            n = node.CreateNode(tok, tok.ToString() )
                            node.Token.UpdateRange(tok)
                            node.Nodes.Add(n)
                            If tok.Type <> TokenType.STRING Then
                                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.STRING.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                                Return

                            End If

                        Case Else
                            m_tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", &H0002, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                            Exit Select
                    End Select
                Case TokenType.AS

                    
                    tok = m_scanner.Scan(TokenType.AS)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.AS Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.AS.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If


                    
                    tok = m_scanner.Scan(TokenType.WHITESPACE)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.WHITESPACE Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.WHITESPACE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If


                    
                    tok = m_scanner.Scan(TokenType.NEW)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.NEW Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NEW.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If


                    
                    tok = m_scanner.Scan(TokenType.WHITESPACE)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.WHITESPACE Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.WHITESPACE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If


                    
                    tok = m_scanner.Scan(TokenType.IDENTIFIER)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.IDENTIFIER Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IDENTIFIER.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If


                    
                    tok = m_scanner.Scan(TokenType.BROPEN)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.BROPEN Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.BROPEN.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If


                    
                    tok = m_scanner.LookAhead(TokenType.IDENTIFIER, TokenType.NUMBER, TokenType.FLOAT)
                    If tok.Type = TokenType.IDENTIFIER Or tok.Type = TokenType.NUMBER Or tok.Type = TokenType.FLOAT Then
                        Do

                            
                            tok = m_scanner.LookAhead(TokenType.IDENTIFIER, TokenType.NUMBER, TokenType.FLOAT)
                            Select Case tok.Type
                            
                                Case TokenType.IDENTIFIER
                                    tok = m_scanner.Scan(TokenType.IDENTIFIER)
                                    n = node.CreateNode(tok, tok.ToString() )
                                    node.Token.UpdateRange(tok)
                                    node.Nodes.Add(n)
                                    If tok.Type <> TokenType.IDENTIFIER Then
                                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IDENTIFIER.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                                        Return

                                    End If

                                Case TokenType.NUMBER
                                    tok = m_scanner.Scan(TokenType.NUMBER)
                                    n = node.CreateNode(tok, tok.ToString() )
                                    node.Token.UpdateRange(tok)
                                    node.Nodes.Add(n)
                                    If tok.Type <> TokenType.NUMBER Then
                                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NUMBER.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                                        Return

                                    End If

                                Case TokenType.FLOAT
                                    tok = m_scanner.Scan(TokenType.FLOAT)
                                    n = node.CreateNode(tok, tok.ToString() )
                                    node.Token.UpdateRange(tok)
                                    node.Nodes.Add(n)
                                    If tok.Type <> TokenType.FLOAT Then
                                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.FLOAT.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                                        Return

                                    End If

                                Case Else
                                    m_tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", &H0002, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                                    Exit Select
                            End Select

                            
                            tok = m_scanner.Scan(TokenType.COMMA)
                            n = node.CreateNode(tok, tok.ToString() )
                            node.Token.UpdateRange(tok)
                            node.Nodes.Add(n)
                            If tok.Type <> TokenType.COMMA Then
                                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.COMMA.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                                Return

                            End If


                            
                            tok = m_scanner.LookAhead(TokenType.WHITESPACE)
                            If tok.Type = TokenType.WHITESPACE Then
                                tok = m_scanner.Scan(TokenType.WHITESPACE)
                                n = node.CreateNode(tok, tok.ToString() )
                                node.Token.UpdateRange(tok)
                                node.Nodes.Add(n)
                                If tok.Type <> TokenType.WHITESPACE Then
                                    m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.WHITESPACE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                                    Return

                                End If

                            End If
                            tok = m_scanner.LookAhead(TokenType.IDENTIFIER, TokenType.NUMBER, TokenType.FLOAT)
                        Loop While tok.Type = TokenType.IDENTIFIER Or tok.Type = TokenType.NUMBER Or tok.Type = TokenType.FLOAT
                    End If

                    
                    tok = m_scanner.Scan(TokenType.BRCLOSE)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.BRCLOSE Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.BRCLOSE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case Else
                    m_tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", &H0002, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                    Exit Select
            End Select

            parent.Token.UpdateRange(node.Token)
        End Sub

        Private Sub ParseVariableAssignment(ByVal parent As ParseNode)
            Dim tok As Token
            Dim n As ParseNode
            Dim node As ParseNode = parent.CreateNode(m_scanner.GetToken(TokenType.VariableAssignment), "VariableAssignment")
            parent.Nodes.Add(node)


            
            tok = m_scanner.Scan(TokenType.VAR)
            n = node.CreateNode(tok, tok.ToString() )
            node.Token.UpdateRange(tok)
            node.Nodes.Add(n)
            If tok.Type <> TokenType.VAR Then
                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.VAR.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                Return

            End If


            
            tok = m_scanner.Scan(TokenType.WHITESPACE)
            n = node.CreateNode(tok, tok.ToString() )
            node.Token.UpdateRange(tok)
            node.Nodes.Add(n)
            If tok.Type <> TokenType.WHITESPACE Then
                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.WHITESPACE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                Return

            End If


            
            ParseAssignment(node)

            parent.Token.UpdateRange(node.Token)
        End Sub

        Private Sub ParseVariableExpr(ByVal parent As ParseNode)
            Dim tok As Token
            Dim n As ParseNode
            Dim node As ParseNode = parent.CreateNode(m_scanner.GetToken(TokenType.VariableExpr), "VariableExpr")
            parent.Nodes.Add(node)


            
            tok = m_scanner.Scan(TokenType.IDENTIFIER)
            n = node.CreateNode(tok, tok.ToString() )
            node.Token.UpdateRange(tok)
            node.Nodes.Add(n)
            If tok.Type <> TokenType.IDENTIFIER Then
                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IDENTIFIER.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                Return

            End If


            
            tok = m_scanner.LookAhead(TokenType.WHITESPACE)
            If tok.Type = TokenType.WHITESPACE Then
                tok = m_scanner.Scan(TokenType.WHITESPACE)
                n = node.CreateNode(tok, tok.ToString() )
                node.Token.UpdateRange(tok)
                node.Nodes.Add(n)
                If tok.Type <> TokenType.WHITESPACE Then
                    m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.WHITESPACE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                    Return

                End If

            End If

            
            tok = m_scanner.LookAhead(TokenType.GT, TokenType.GTE, TokenType.LT, TokenType.LTE, TokenType.NOTEQUAL, TokenType.EQUAL)
            Select Case tok.Type
            
                Case TokenType.GT
                    tok = m_scanner.Scan(TokenType.GT)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.GT Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.GT.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case TokenType.GTE
                    tok = m_scanner.Scan(TokenType.GTE)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.GTE Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.GTE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case TokenType.LT
                    tok = m_scanner.Scan(TokenType.LT)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.LT Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.LT.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case TokenType.LTE
                    tok = m_scanner.Scan(TokenType.LTE)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.LTE Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.LTE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case TokenType.NOTEQUAL
                    tok = m_scanner.Scan(TokenType.NOTEQUAL)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.NOTEQUAL Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NOTEQUAL.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case TokenType.EQUAL
                    tok = m_scanner.Scan(TokenType.EQUAL)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.EQUAL Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.EQUAL.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case Else
                    m_tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", &H0002, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                    Exit Select
            End Select

            
            tok = m_scanner.LookAhead(TokenType.WHITESPACE)
            If tok.Type = TokenType.WHITESPACE Then
                tok = m_scanner.Scan(TokenType.WHITESPACE)
                n = node.CreateNode(tok, tok.ToString() )
                node.Token.UpdateRange(tok)
                node.Nodes.Add(n)
                If tok.Type <> TokenType.WHITESPACE Then
                    m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.WHITESPACE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                    Return

                End If

            End If

            
            tok = m_scanner.LookAhead(TokenType.IDENTIFIER, TokenType.NUMBER, TokenType.FLOAT, TokenType.NULLKW, TokenType.STRING)
            Select Case tok.Type
            
                Case TokenType.IDENTIFIER
                    tok = m_scanner.Scan(TokenType.IDENTIFIER)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.IDENTIFIER Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IDENTIFIER.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case TokenType.NUMBER
                    tok = m_scanner.Scan(TokenType.NUMBER)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.NUMBER Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NUMBER.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case TokenType.FLOAT
                    tok = m_scanner.Scan(TokenType.FLOAT)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.FLOAT Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.FLOAT.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case TokenType.NULLKW
                    tok = m_scanner.Scan(TokenType.NULLKW)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.NULLKW Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NULLKW.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case TokenType.STRING
                    tok = m_scanner.Scan(TokenType.STRING)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.STRING Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.STRING.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case Else
                    m_tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", &H0002, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                    Exit Select
            End Select

            parent.Token.UpdateRange(node.Token)
        End Sub

        Private Sub ParseField(ByVal parent As ParseNode)
            Dim tok As Token
            Dim n As ParseNode
            Dim node As ParseNode = parent.CreateNode(m_scanner.GetToken(TokenType.Field), "Field")
            parent.Nodes.Add(node)


            
            tok = m_scanner.LookAhead(TokenType.PUBLICKW, TokenType.PRIVATEKW)
            If tok.Type = TokenType.PUBLICKW Or tok.Type = TokenType.PRIVATEKW Then
                tok = m_scanner.LookAhead(TokenType.PUBLICKW, TokenType.PRIVATEKW)
                Select Case tok.Type
                
                    Case TokenType.PUBLICKW
                        tok = m_scanner.Scan(TokenType.PUBLICKW)
                        n = node.CreateNode(tok, tok.ToString() )
                        node.Token.UpdateRange(tok)
                        node.Nodes.Add(n)
                        If tok.Type <> TokenType.PUBLICKW Then
                            m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PUBLICKW.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                            Return

                        End If

                    Case TokenType.PRIVATEKW
                        tok = m_scanner.Scan(TokenType.PRIVATEKW)
                        n = node.CreateNode(tok, tok.ToString() )
                        node.Token.UpdateRange(tok)
                        node.Nodes.Add(n)
                        If tok.Type <> TokenType.PRIVATEKW Then
                            m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PRIVATEKW.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                            Return

                        End If

                    Case Else
                        m_tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", &H0002, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Exit Select
                End Select
            End If

            
            tok = m_scanner.Scan(TokenType.WHITESPACE)
            n = node.CreateNode(tok, tok.ToString() )
            node.Token.UpdateRange(tok)
            node.Nodes.Add(n)
            If tok.Type <> TokenType.WHITESPACE Then
                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.WHITESPACE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                Return

            End If


            
            ParseAssignment(node)

            
            tok = m_scanner.LookAhead(TokenType.NEWLINE, TokenType.EOF)
            If tok.Type = TokenType.NEWLINE Or tok.Type = TokenType.EOF Then
                tok = m_scanner.LookAhead(TokenType.NEWLINE, TokenType.EOF)
                Select Case tok.Type
                
                    Case TokenType.NEWLINE
                        tok = m_scanner.Scan(TokenType.NEWLINE)
                        n = node.CreateNode(tok, tok.ToString() )
                        node.Token.UpdateRange(tok)
                        node.Nodes.Add(n)
                        If tok.Type <> TokenType.NEWLINE Then
                            m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NEWLINE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                            Return

                        End If

                    Case TokenType.EOF
                        tok = m_scanner.Scan(TokenType.EOF)
                        n = node.CreateNode(tok, tok.ToString() )
                        node.Token.UpdateRange(tok)
                        node.Nodes.Add(n)
                        If tok.Type <> TokenType.EOF Then
                            m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.EOF.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                            Return

                        End If

                    Case Else
                        m_tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", &H0002, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Exit Select
                End Select
            End If

            parent.Token.UpdateRange(node.Token)
        End Sub

        Private Sub ParseStatement(ByVal parent As ParseNode)
            Dim tok As Token
            Dim n As ParseNode
            Dim node As ParseNode = parent.CreateNode(m_scanner.GetToken(TokenType.Statement), "Statement")
            parent.Nodes.Add(node)


            
            tok = m_scanner.LookAhead(TokenType.VAR, TokenType.IFKW)
            Select Case tok.Type
            
                Case TokenType.VAR
                    ParseVariableAssignment(node)
                Case TokenType.IFKW
                    ParseIfStatement(node)
                Case Else
                    m_tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", &H0002, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                    Exit Select
            End Select

            
            tok = m_scanner.LookAhead(TokenType.NEWLINE, TokenType.EOF)
            If tok.Type = TokenType.NEWLINE Or tok.Type = TokenType.EOF Then
                tok = m_scanner.LookAhead(TokenType.NEWLINE, TokenType.EOF)
                Select Case tok.Type
                
                    Case TokenType.NEWLINE
                        tok = m_scanner.Scan(TokenType.NEWLINE)
                        n = node.CreateNode(tok, tok.ToString() )
                        node.Token.UpdateRange(tok)
                        node.Nodes.Add(n)
                        If tok.Type <> TokenType.NEWLINE Then
                            m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NEWLINE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                            Return

                        End If

                    Case TokenType.EOF
                        tok = m_scanner.Scan(TokenType.EOF)
                        n = node.CreateNode(tok, tok.ToString() )
                        node.Token.UpdateRange(tok)
                        node.Nodes.Add(n)
                        If tok.Type <> TokenType.EOF Then
                            m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.EOF.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                            Return

                        End If

                    Case Else
                        m_tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", &H0002, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Exit Select
                End Select
            End If

            parent.Token.UpdateRange(node.Token)
        End Sub

        Private Sub ParseIndentedStatement(ByVal parent As ParseNode)
            Dim tok As Token
            Dim n As ParseNode
            Dim node As ParseNode = parent.CreateNode(m_scanner.GetToken(TokenType.IndentedStatement), "IndentedStatement")
            parent.Nodes.Add(node)


            
            Do
                ParseIndention(node)
                tok = m_scanner.LookAhead(TokenType.TAB, TokenType.FOURSPACE)
            Loop While tok.Type = TokenType.TAB Or tok.Type = TokenType.FOURSPACE

            
            tok = m_scanner.LookAhead(TokenType.VAR, TokenType.IFKW)
            If tok.Type = TokenType.VAR Or tok.Type = TokenType.IFKW Then
                ParseStatement(node)
            End If

            parent.Token.UpdateRange(node.Token)
        End Sub

        Private Sub ParseMethod(ByVal parent As ParseNode)
            Dim tok As Token
            Dim n As ParseNode
            Dim node As ParseNode = parent.CreateNode(m_scanner.GetToken(TokenType.Method), "Method")
            parent.Nodes.Add(node)


            
            tok = m_scanner.LookAhead(TokenType.PUBLICDEFKW, TokenType.PRIVATEDEFKW, TokenType.DEFKW)
            Select Case tok.Type
            
                Case TokenType.PUBLICDEFKW
                    tok = m_scanner.Scan(TokenType.PUBLICDEFKW)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.PUBLICDEFKW Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PUBLICDEFKW.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case TokenType.PRIVATEDEFKW
                    tok = m_scanner.Scan(TokenType.PRIVATEDEFKW)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.PRIVATEDEFKW Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.PRIVATEDEFKW.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case TokenType.DEFKW
                    tok = m_scanner.Scan(TokenType.DEFKW)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.DEFKW Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.DEFKW.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case Else
                    m_tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", &H0002, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                    Exit Select
            End Select

            
            tok = m_scanner.Scan(TokenType.WHITESPACE)
            n = node.CreateNode(tok, tok.ToString() )
            node.Token.UpdateRange(tok)
            node.Nodes.Add(n)
            If tok.Type <> TokenType.WHITESPACE Then
                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.WHITESPACE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                Return

            End If


            
            tok = m_scanner.Scan(TokenType.IDENTIFIER)
            n = node.CreateNode(tok, tok.ToString() )
            node.Token.UpdateRange(tok)
            node.Nodes.Add(n)
            If tok.Type <> TokenType.IDENTIFIER Then
                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IDENTIFIER.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                Return

            End If


            
            tok = m_scanner.Scan(TokenType.BROPEN)
            n = node.CreateNode(tok, tok.ToString() )
            node.Token.UpdateRange(tok)
            node.Nodes.Add(n)
            If tok.Type <> TokenType.BROPEN Then
                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.BROPEN.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                Return

            End If


            
            tok = m_scanner.LookAhead(TokenType.IDENTIFIER, TokenType.NUMBER, TokenType.FLOAT)
            If tok.Type = TokenType.IDENTIFIER Or tok.Type = TokenType.NUMBER Or tok.Type = TokenType.FLOAT Then
                Do

                    
                    tok = m_scanner.LookAhead(TokenType.IDENTIFIER, TokenType.NUMBER, TokenType.FLOAT)
                    Select Case tok.Type
                    
                        Case TokenType.IDENTIFIER
                            tok = m_scanner.Scan(TokenType.IDENTIFIER)
                            n = node.CreateNode(tok, tok.ToString() )
                            node.Token.UpdateRange(tok)
                            node.Nodes.Add(n)
                            If tok.Type <> TokenType.IDENTIFIER Then
                                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IDENTIFIER.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                                Return

                            End If

                        Case TokenType.NUMBER
                            tok = m_scanner.Scan(TokenType.NUMBER)
                            n = node.CreateNode(tok, tok.ToString() )
                            node.Token.UpdateRange(tok)
                            node.Nodes.Add(n)
                            If tok.Type <> TokenType.NUMBER Then
                                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NUMBER.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                                Return

                            End If

                        Case TokenType.FLOAT
                            tok = m_scanner.Scan(TokenType.FLOAT)
                            n = node.CreateNode(tok, tok.ToString() )
                            node.Token.UpdateRange(tok)
                            node.Nodes.Add(n)
                            If tok.Type <> TokenType.FLOAT Then
                                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.FLOAT.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                                Return

                            End If

                        Case Else
                            m_tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", &H0002, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                            Exit Select
                    End Select

                    
                    tok = m_scanner.Scan(TokenType.COMMA)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.COMMA Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.COMMA.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If


                    
                    tok = m_scanner.Scan(TokenType.WHITESPACE)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.WHITESPACE Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.WHITESPACE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                    tok = m_scanner.LookAhead(TokenType.IDENTIFIER, TokenType.NUMBER, TokenType.FLOAT)
                Loop While tok.Type = TokenType.IDENTIFIER Or tok.Type = TokenType.NUMBER Or tok.Type = TokenType.FLOAT
            End If

            
            tok = m_scanner.Scan(TokenType.BRCLOSE)
            n = node.CreateNode(tok, tok.ToString() )
            node.Token.UpdateRange(tok)
            node.Nodes.Add(n)
            If tok.Type <> TokenType.BRCLOSE Then
                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.BRCLOSE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                Return

            End If


            
            tok = m_scanner.Scan(TokenType.COLON)
            n = node.CreateNode(tok, tok.ToString() )
            node.Token.UpdateRange(tok)
            node.Nodes.Add(n)
            If tok.Type <> TokenType.COLON Then
                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.COLON.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                Return

            End If


            
            tok = m_scanner.Scan(TokenType.NEWLINE)
            n = node.CreateNode(tok, tok.ToString() )
            node.Token.UpdateRange(tok)
            node.Nodes.Add(n)
            If tok.Type <> TokenType.NEWLINE Then
                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NEWLINE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                Return

            End If


            
            Do
                ParseIndentedStatement(node)
                tok = m_scanner.LookAhead(TokenType.TAB, TokenType.FOURSPACE)
            Loop While tok.Type = TokenType.TAB Or tok.Type = TokenType.FOURSPACE

            parent.Token.UpdateRange(node.Token)
        End Sub

        Private Sub ParseIfStatement(ByVal parent As ParseNode)
            Dim tok As Token
            Dim n As ParseNode
            Dim node As ParseNode = parent.CreateNode(m_scanner.GetToken(TokenType.IfStatement), "IfStatement")
            parent.Nodes.Add(node)


            
            tok = m_scanner.Scan(TokenType.IFKW)
            n = node.CreateNode(tok, tok.ToString() )
            node.Token.UpdateRange(tok)
            node.Nodes.Add(n)
            If tok.Type <> TokenType.IFKW Then
                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.IFKW.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                Return

            End If


            
            tok = m_scanner.Scan(TokenType.WHITESPACE)
            n = node.CreateNode(tok, tok.ToString() )
            node.Token.UpdateRange(tok)
            node.Nodes.Add(n)
            If tok.Type <> TokenType.WHITESPACE Then
                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.WHITESPACE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                Return

            End If


            
            tok = m_scanner.LookAhead(TokenType.IDENTIFIER, TokenType.BROPEN)
            Select Case tok.Type
            
                Case TokenType.IDENTIFIER
                    ParseVariableExpr(node)
                Case TokenType.BROPEN

                    
                    tok = m_scanner.Scan(TokenType.BROPEN)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.BROPEN Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.BROPEN.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If


                    
                    ParseVariableExpr(node)

                    
                    tok = m_scanner.Scan(TokenType.BRCLOSE)
                    n = node.CreateNode(tok, tok.ToString() )
                    node.Token.UpdateRange(tok)
                    node.Nodes.Add(n)
                    If tok.Type <> TokenType.BRCLOSE Then
                        m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.BRCLOSE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                        Return

                    End If

                Case Else
                    m_tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", &H0002, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                    Exit Select
            End Select

            
            tok = m_scanner.Scan(TokenType.COLON)
            n = node.CreateNode(tok, tok.ToString() )
            node.Token.UpdateRange(tok)
            node.Nodes.Add(n)
            If tok.Type <> TokenType.COLON Then
                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.COLON.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                Return

            End If


            
            tok = m_scanner.Scan(TokenType.NEWLINE)
            n = node.CreateNode(tok, tok.ToString() )
            node.Token.UpdateRange(tok)
            node.Nodes.Add(n)
            If tok.Type <> TokenType.NEWLINE Then
                m_tree.Errors.Add(New ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NEWLINE.ToString(), &H1001, 0, tok.StartPos, tok.StartPos, tok.EndPos - tok.StartPos))
                Return

            End If


            
            Do
                ParseIndentedStatement(node)
                tok = m_scanner.LookAhead(TokenType.TAB, TokenType.FOURSPACE)
            Loop While tok.Type = TokenType.TAB Or tok.Type = TokenType.FOURSPACE

            parent.Token.UpdateRange(node.Token)
        End Sub


    End Class
#End Region
End Namespace

