//Tiny Parser Generator v1.3
//Copyright Â© Herre Kuijpers 2008-2012

// By default the TextHighlighter is not generated.
// Set its Generate attribute to true
<% @TextHighlighter Generate="True" %>
// the Generate parameter specifies wether the file
// should be generated. By default this is set to True
<% @Parser Generate="True" %>
<% @Scanner Generate="True" %>

<% @ParseTree Generate="True" %>

<% @TinyPG Namespace="Mizu2.Parser" Language="C#" OutputPath="C:\\Users\\alex\\Documents\\visual studio 2010\\Projects\\Mizu2\\Mizu2.Parser\\" %>

GT -> @"\<";
GTE -> @"\<\=";
DEQUAL -> @"\=\=";
LT -> @"\>";
LTE -> @"\>\=";
NOTEQUAL -> @"(\!\=|\<\>)";
OPENBRCK -> @"\{";
CLOSEBRCK -> @"\}";
[Color(255, 0, 0)] STRING -> @"\"".+?\""";
COMMA -> @"\,";
NEWLINE -> @"(\r\n|\n)";
EQUAL -> @"\=";
WHITESPACE       -> @"\s+";
OPENBR -> @"\[";
CLOSEBR -> @"\]";
COLON -> @"\:";
EOF -> @"^\s*$";
[Skip] TAB -> @"\t";
[Skip] FOURSPACE -> @"\s\s\s\s";
[Color(0, 0, 255)] IDENTIFIER -> @"[a-zA-Z_][a-zA-Z0-9_]*";
[Color(255, 0, 0)] NUMBER -> @"(\-)?[0-9]+";
[Color(255, 0, 0)] FLOAT -> @"(\-)?[0-9]+\.[0-9]+"; 
TYPE -> @"[a-zA-Z_]*(\.[a-zA-Z0-9_]*)+";
NULLKW -> @"(null|nil)";
CLASSKW -> @"class";
PUBLICKW -> @"public";
PRIVATEKW -> @"private";
PUBLICCLASSKW -> @"(P|p)ublic class";
PRIVATECLASSKW -> @"(P|p)rivate class";
DEFKW -> @"def";
PUBLICDEFKW -> @"(P|p)ublic def";
PRIVATEDEFKW -> @"(P|p)rivate def";
[Color(0, 0, 255)] BROPEN -> @"\("; 
[Color(0, 0, 255)] BRCLOSE -> @"\)";
IFKW -> @"if";
TRUE -> @"true";
FALSE -> @"false";
VAR -> @"var";
NEW -> @"new";
AS -> @"as";
ELSE -> @"else";

Start -> Statement+;
Boolean -> (TRUE|FALSE);
Assignment -> IDENTIFIER (WHITESPACE)? (EQUAL (WHITESPACE)? (FuncCall|IDENTIFIER|NUMBER|FLOAT|NULLKW|STRING)|AS WHITESPACE NEW WHITESPACE TYPE BROPEN (((IDENTIFIER|NUMBER|FLOAT) COMMA (WHITESPACE)?)+)? BRCLOSE);
VariableAssignment -> VAR WHITESPACE Assignment;
VariableExpr -> IDENTIFIER (WHITESPACE)? (GT|GTE|LT|LTE|NOTEQUAL|EQUAL) (WHITESPACE)? (IDENTIFIER|NUMBER|FLOAT|NULLKW|STRING);
//Class -> (PUBLICCLASSKW|PRIVATECLASSKW|CLASSKW) WHITESPACE IDENTIFIER COLON NEWLINE (IndentedLine)+;
//Classes -> (Class (NEWLINE|EOF))+;
//Field -> (PUBLICKW|PRIVATEKW)? WHITESPACE Assignment (NEWLINE|EOF)?;
Statement -> (VariableAssignment|IfStatement|FuncCall) (NEWLINE|EOF?);
//IndentedLine -> Indention+ (Method|Field);
//Method -> (PUBLICDEFKW|PRIVATEDEFKW|DEFKW) WHITESPACE IDENTIFIER BROPEN (((IDENTIFIER|NUMBER|FLOAT) COMMA (WHITESPACE))+)? BRCLOSE COLON NEWLINE Statement+;
IfStatement -> IFKW WHITESPACE (VariableExpr|(BROPEN VariableExpr BRCLOSE)) COLON (NEWLINE)? IfStmtIFBody (ELSE COLON NEWLINE IfStmtELSEBody)?;
IfStmtIFBody -> Statement+;
IfStmtELSEBody -> Statement+;
FuncCall -> TYPE BROPEN ((IDENTIFIER|NUMBER|FLOAT|STRING) (COMMA (IDENTIFIER|NUMBER|FLOAT|STRING))?)? BRCLOSE;