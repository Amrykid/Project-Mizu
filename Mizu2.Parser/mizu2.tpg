//Tiny Parser Generator v1.3
//Copyright Â© Herre Kuijpers 2008-2012

// By default the TextHighlighter is not generated.
// Set its Generate attribute to true
<% @TextHighlighter Generate="True" %>
// the Generate parameter specifies wether the file
// should be generated. By default this is set to True
<% @Parser Generate="True" %>
<% @Scanner Generate="True" %>

<% @ParseTree Generate="True" %>

<% @TinyPG Namespace="Mizu2.Parser" Language="C#" OutputPath="C:\\Users\\alex\\Documents\\visual studio 2010\\Projects\\Mizu2\\Mizu2.Parser\\" %>

GT -> @"\<";
GTE -> @"\<\=";
DEQUAL -> @"\=\=";
LT -> @"\>";
LTE -> @"\>\=";
NOTEQUAL -> @"(\!\=|\<\>)";
OPENBRCK -> @"\{";
CLOSEBRCK -> @"\}";
[Color(255, 0, 0)] STRING -> @"\"".+?\""";
COMMA -> @"\,";
NEWLINE -> @"(\r\n|\n)";
EQUAL -> @"\=";
WHITESPACE       -> @"\s+";
OPENBR -> @"\[";
CLOSEBR -> @"\]";
PERIOD -> @"\.";
COLON -> @"\:";

PLUS -> @"\+";
MINUS -> @"\-";
MULTI -> @"\*";
DIV -> @"\/";

EOF -> @"^\s*$";
TAB -> @"\t";
FOURSPACE -> @"\s\s\s\s";
[Color(0, 0, 255)] IDENTIFIER -> @"(?!(uses|var|if|for|handle|while|true|false))[a-zA-Z][a-zA-Z0-9_]*"; //Used for matching variables without picking up keywords.
[Color(255, 0, 0)] NUMBER -> @"(\-)?[0-9]+";
[Color(255, 0, 0)] FLOAT -> @"(\-)?[0-9]+\.[0-9]+";
NAMESPACE -> @"(?!(\s|\n))[a-zA-Z_]*((\.[a-zA-Z0-9_]*)+)?\b";
TYPE -> @"\b(?!(uses|var|if|for|handle|while))[a-zA-Z0-9_]*((\.[a-zA-Z0-9_]*)?)*\b";
NULLKW -> @"(null|nil)";
CLASSKW -> @"class";
PUBLICKW -> @"public";
PRIVATEKW -> @"private";
PUBLICCLASSKW -> @"(P|p)ublic class";
PRIVATECLASSKW -> @"(P|p)rivate class";
DEFKW -> @"def";
PUBLICDEFKW -> @"(P|p)ublic def";
PRIVATEDEFKW -> @"(P|p)rivate def";
[Color(0, 0, 255)] BROPEN -> @"\("; 
[Color(0, 0, 255)] BRCLOSE -> @"\)";

[Skip] EMPTYLINE -> @"(\r\n|\n)\s(?=\S)";

BRCKOPEN -> @"\{";
BRCKCLOSE -> @"\}";

IFKW -> @"if";
TRUE -> @"true";
FALSE -> @"false";
VAR -> @"var";
NEW -> @"new";
AS -> @"as";
ELSE -> @"else";
FOR -> @"for";
IN -> @"in";
USES -> @"uses";
HANDLE -> @"handle";
WHILE -> @"while";
SET -> @"set";

Start -> Statement+;
Boolean -> (TRUE|FALSE);
Assignment -> IDENTIFIER (WHITESPACE)? (EQUAL (WHITESPACE)? (FuncCall|IDENTIFIER|NUMBER|FLOAT|NULLKW|STRING|MathExpr)|AS WHITESPACE NEW WHITESPACE Type BROPEN (((IDENTIFIER|NUMBER|FLOAT|STRING) COMMA? (WHITESPACE)?)+)? BRCLOSE);
VariableAssignment -> VAR WHITESPACE Assignment;
VariableExpr -> IDENTIFIER (WHITESPACE)? (GT|GTE|LT|LTE|NOTEQUAL|EQUAL) (WHITESPACE)? (IDENTIFIER|NUMBER|FLOAT|NULLKW|STRING);
//Class -> (PUBLICCLASSKW|PRIVATECLASSKW|CLASSKW) WHITESPACE IDENTIFIER COLON NEWLINE (IndentedLine)+;
//Classes -> (Class (NEWLINE|EOF))+;
//Field -> (PUBLICKW|PRIVATEKW)? WHITESPACE Assignment (NEWLINE|EOF)?;
Statement -> (VariableAssignment|IfStatement|FuncCall|ForStatement|UsesStatement|WhileStatement|HandleStatement|PropertySetStatement)+ (NEWLINE|EMPTYLINE+|EOF?);
//IndentedLine -> Indention+ (Method|Field);
//Method -> (PUBLICDEFKW|PRIVATEDEFKW|DEFKW) WHITESPACE IDENTIFIER BROPEN (((IDENTIFIER|NUMBER|FLOAT) COMMA (WHITESPACE))+)? BRCLOSE COLON NEWLINE Statement+;
Type -> TYPE ((PERIOD IDENTIFIER)+)?;

IfStatement -> IFKW WHITESPACE (VariableExpr|(BROPEN VariableExpr BRCLOSE)) (NEWLINE BRCKOPEN|BRCKOPEN (NEWLINE)?) IfStmtIFBody BRCKCLOSE (ELSE (NEWLINE BRCKOPEN|BRCKOPEN (NEWLINE)) IfStmtELSEBody BRCKCLOSE)?;
IfStmtIFBody -> (Indention? Statement+)+;
IfStmtELSEBody -> (Indention? Statement+)+;

Operator -> (PLUS|MINUS|MULTI|DIV);
Indention -> (TAB|FOURSPACE);
FuncCall -> Type (FuncCall_Method|FuncCall_SetProperty)?;
//The following can be a method or property.
FuncCall_Method -> (BROPEN ((IDENTIFIER|FuncCall|NUMBER|FLOAT|STRING) (COMMA (IDENTIFIER|FuncCall|NUMBER|FLOAT|STRING))?)? BRCLOSE)?;
FuncCall_SetProperty ->  WHITESPACE EQUAL WHITESPACE (IDENTIFIER|FuncCall|NUMBER|FLOAT|STRING);

PropertySetStatement-> SET WHITESPACE Type WHITESPACE EQUAL WHITESPACE (IDENTIFIER|FuncCall|NUMBER|FLOAT|STRING);
MathExpr -> BROPEN (WHITESPACE)? ((NUMBER|IDENTIFIER|MathExpr) WHITESPACE) ((NUMBER|IDENTIFIER|MathExpr) WHITESPACE) Operator BRCLOSE;

ForStatement -> FOR (WHITESPACE)? BROPEN (ForEachStmt|ForIterStmt) BRCLOSE (NEWLINE BRCKOPEN|BRCKOPEN (NEWLINE)?) ForStmtBODY BRCKCLOSE;
ForEachStmt -> (Type|VAR) WHITESPACE IDENTIFIER WHITESPACE IN WHITESPACE IDENTIFIER;
ForIterStmt -> NUMBER;
ForStmtBODY -> (Indention? Statement+)+;

UsesStatement -> USES WHITESPACE NAMESPACE;

HandleStatement -> HANDLE WHITESPACE Type BROPEN ((IDENTIFIER) (COMMA (IDENTIFIER))?)? BRCLOSE (WHITESPACE BRCKOPEN NEWLINE|NEWLINE BRCKOPEN NEWLINE) HandleStmtBODY BRCKCLOSE;
HandleStmtBODY ->(Indention? Statement+)+; 

WhileStatement -> WHILE (WHITESPACE)? BROPEN (VariableExpr|Boolean) BRCLOSE (WHITESPACE BRCKOPEN NEWLINE+|NEWLINE BRCKOPEN NEWLINE) WhileStmtBODY (NEWLINE)? BRCKCLOSE;
WhileStmtBODY -> (Indention? Statement+)+;